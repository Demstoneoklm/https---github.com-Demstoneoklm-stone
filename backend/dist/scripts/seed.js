"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAdminUser = void 0;
const createAdminUser = async () => { try { }
finally { } }; // Vérifier si l'admin existe déjà    const existingAdmin = await User.findOne({      where: { email: 'admin237@gmail.com' }      // Removed explicit attributes list to let Sequelize infer    });    if (existingAdmin) {      console.log('L\'administrateur existe déjà');      return existingAdmin;    }    // Créer l'administrateur    const admin = await User.create({      firstName: 'Admin',      lastName: 'System',      email: 'admin237@gmail.com',      password: 'admin123AD/', // Sera hashé automatiquement      role: 'admin',      isActive: true    });    console.log('Administrateur créé avec succès');    return admin;  } catch (error) {    console.error('Erreur lors de la création de l\'administrateur:', error);    throw error;  }}; // Fonction pour initialiser la base de donnéesexport const initializeDatabase = async () => {  try {    // Désactiver temporairement les vérifications de clés étrangères    await sequelize.query('SET FOREIGN_KEY_CHECKS = 0;');    // Synchroniser les modèles en forçant la recréation des tables    await sequelize.sync({ force: true });     // Réactiver les vérifications de clés étrangères    await sequelize.query('SET FOREIGN_KEY_CHECKS = 1;');    console.log('Base de données synchronisée');    // Créer l'admin    await createAdminUser();    console.log('Initialisation terminée');  } catch (error) {    console.error('Erreur lors de l\'initialisation:', error);    process.exit(1);  }}; // Exécuter si appelé directementif (require.main === module) {  initializeDatabase();}
exports.createAdminUser = createAdminUser;
